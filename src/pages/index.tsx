import type { GetStaticProps } from 'next';
import Head from 'next/head';

import { IHomeProps } from '../types/IHomeProps'
import { IMovie } from '../types/IMovie'
import { IGenre } from '../types/IGenre';

import styles from '../styles/Home.module.scss'

import { api } from '../services/api'
import axios, { AxiosResponse } from 'axios'
import { useState } from 'react';

const Home = (props: IHomeProps) => {
  
  const [filter, setFilter] = useState<number[]>([]);
  console.log(filter);

  // @ts-ignore
  function handleCheckboxChange(event, itemId:number) {
    const value = !event.target.checked;
    console.log('Event', event.target.checked)

    const stateValue = [...filter]

    if(value){
      let index =stateValue.indexOf(itemId)
      stateValue.splice(index, 1)
    }else{
      stateValue.push(itemId)
    }

    setFilter(stateValue)

  }


  return (
    <div className={styles.container}>
      <Head>
        <title>Promobit - Movies</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/assets/apple-touch-icon.png"></link>
        <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon-16x16.png"></link>
        <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon-32x32.png"></link>
        <link rel="icon" type="image/png" sizes="192x192" href="/assets/favicon-192x192.png"></link>
        <link rel="icon" type="image/png" sizes="194x194" href="/assets/favicon-194x194.png"></link>
      </Head>
      <aside>
        <h3>Filtros:</h3>
        {props.genres.map(item => {
          return (
            <div key={item.id}>
              <input
                type="checkbox"
                name={item.name}
                id={`${item.id}`}
                checked={filter.indexOf(item.id) === -1 ? false : true}
                onChange={ (event)=>{ handleCheckboxChange(event, item.id)}}
              />
              <label htmlFor={`${item.id}`}>{item.name}</label>
            </div>
          )
        })}
      </aside>
      <main>

        <h2> Filmes Populares:</h2>

        {props.movies.map((item, id) => {
          return (
            <h3 key={id}> {item.title}</h3>
          )
        })}

      </main>
    </div>
  )
}

export default Home;

export const getStaticProps: GetStaticProps = async () => {

  try {
    /**
     * Criando uma Array de promises para as requisições
     * e realizando as consultas
     */
    const requestArray: Promise<AxiosResponse<any>>[] = [];

    for (let i = 0; i < 10; i++) {
      requestArray.push(api.get('movie/popular/', {
        params: {
          api_key: '3035934e587a656dcf1c327b5ec0779f',
          language: 'pt-BR',
          page: i + 1
        }
      }));
    }

    const responseMovie = await axios.all(requestArray)
    const dataMovie = await responseMovie.map(response => response.data.results);

    /**
     * Reduzindo os Arrays para ter um único com todos os valores
     */
    const dataMovieReduced: IMovie[] = dataMovie.reduce(function (accumulator, currentValue) {
      return accumulator.concat(...currentValue)
    }, []);

    /**
     * Realizando Map dos valores para termos o valor do item no ranking
     */
    const dataMovieMapped = dataMovieReduced.map((item, index) => {
      item['rank'] = index
      return item;
    })

    /**
     * Consultando os Generos disponíveis
     */
    const responseGenre = await api.get('genre/movie/list', {
      params: {
        api_key: '3035934e587a656dcf1c327b5ec0779f',
      }
    });
    const dataGenre: IGenre[] = await responseGenre.data.genres;

    /**
     * Retorando os arrais e o Revalidate para o caso de sucesso e de erro
     */
    return {
      props: {
        movies: dataMovieMapped,
        genres: dataGenre
      },
      revalidate: 60 * 60 * 24 //Um dia
    }
  } catch (error) {
    console.error(error);
    return {
      props: {
        movies: [],
        genres: []
      },
      revalidate: 60 * 60 * 1 //Uma hora,
    }
  }
}